{"version":3,"sources":["Board/Board.module.css","Square/Square.module.css","Button/Button.module.css","Game.module.css","Square/Square.js","Board/Board.js","Button/Button.js","Game.js","index.js"],"names":["module","exports","Board","BoardRow","Status","Square","Highlight","Button","active","Game","props","classArr","classes","highlight","react_default","a","createElement","onClick","className","join","value","rows","i","squares","_loop","j","push","src_Square_Square","highlightBox","move","key","status","click","children","initialState","history","box","Array","fill","xIsNext","stepNumber","moveSortToggle","state","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","winningSquare","_lines$i2","getCurrentBox","_this","boxClickHandler","currentBox","mark","setState","prevState","newHistory","slice","newBox","toConsumableArray","isGameOver","resetGame","jumpTo","_this2","this","console","log","winner","playAgain","src_Button_Button","winnerSquareArr","_winnerSquareArr","moveButtons","src_Board_Board","Component","app","src_Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13662b37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__1u_uE\",\"BoardRow\":\"Board_BoardRow__35Bp6\",\"Status\":\"Board_Status__1-BBx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__1AgUJ\",\"Highlight\":\"Square_Highlight__1aHbn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__egfoS\",\"active\":\"Button_active__3WdXL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__2wKc_\"};","import React from 'react';\nimport classes from './Square.module.css';\nconst Square = props=>{\n    const classArr = [classes.Square,props.highlight?classes.Highlight:null];\n    return(\n        <button onClick={props.onClick} className={classArr.join(\" \")}>{props.value}</button>\n    )\n}\n\nexport default Square;","import React from 'react';\nimport Square from '../Square/Square';\nimport classes from './Board.module.css';\nconst Board = props=>{\n    const rows = [];\n    for(let i=0;i<3;i++){\n        const squares = [];\n        for(let j=i*3;j<(i*3)+3;j++){\n            squares.push(<Square highlight={props.highlightBox[j]} value={props.move[j]} key={j} onClick={()=>props.onClick(j)}/>)\n        }\n        rows.push(<div key={i} className={classes.BoardRow}>{squares}</div>)\n    }\n\n    return(\n        <div className={classes.Board}>\n            <div className={classes.Status}>\n                {props.status}\n            </div>\n            {rows}\n        </div>\n    )\n}\nexport default Board;","import React from 'react';\nimport classes from './Button.module.css';\nconst Button = props=>{\n    const classArr = [classes.Button,props.active?classes.active:null]\n    return(\n        <button className={classArr.join(\" \")} onClick={props.click}>{props.children}</button>\n    )\n}\n\nexport default Button;","import React,{Component} from 'react';\nimport classes from './Game.module.css';\nimport Board from './Board/Board';\nimport Button from './Button/Button';\nconst initialState = {\n    history:[\n        {box: Array(9).fill(null)}\n    ],\n    xIsNext: true,\n    stepNumber: 0,\n    moveSortToggle: false\n}\nclass Game extends Component{\n    state={...initialState}\n    calculateWinner = (box)=>{\n        const lines = [\n            [0,1,2],\n            [3,4,5],\n            [6,7,8],\n            [0,3,6],\n            [1,4,7],\n            [2,5,8],\n            [0,4,8],\n            [2,4,6]\n        ]\n        for (let i = 0; i < lines.length; i++) {\n            const [a,b,c] = lines[i];\n            if(box[a] && box[a] === box[b] && box[a] === box[c]){\n                return box[a]\n            }\n        }\n        return null;\n    }\n    winningSquare = (box)=>{\n        const lines = [\n            [0,1,2],\n            [3,4,5],\n            [6,7,8],\n            [0,3,6],\n            [1,4,7],\n            [2,5,8],\n            [0,4,8],\n            [2,4,6]\n        ]\n        for (let i = 0; i < lines.length; i++) {\n            const [a,b,c] = lines[i];\n            if(box[a] && box[a] === box[b] && box[a] === box[c]){\n                return lines[i]\n            }\n        }\n        return []\n    }\n    getCurrentBox = ()=>{\n        return (this.state.history[this.state.stepNumber]).box\n    }\n    boxClickHandler = (i)=>{\n        const currentBox = this.getCurrentBox();\n        if(currentBox[i] || this.calculateWinner(currentBox)){\n            return;\n        }\n        const mark = this.state.xIsNext? \"X\":\"O\"\n        this.setState(prevState=>{\n            const newHistory = prevState.history.slice(0,prevState.stepNumber+1)\n            const newBox = [...(newHistory[newHistory.length-1]).box]\n            newBox[i] = mark;\n            newHistory.push({box: newBox})\n            return {xIsNext: !prevState.xIsNext,history:newHistory,stepNumber: prevState.stepNumber+1}\n        })\n    }\n    isGameOver = (box)=>{\n        for (let i = 0; i < box.length; i++) {\n            const value = box[i];\n            if(!value){\n                return false\n            }\n        }\n        return true;\n    }\n    resetGame = ()=>{\n        this.setState(initialState)\n    }\n    jumpTo = (i)=>{\n        this.setState({stepNumber: i,xIsNext: i%2 === 0})\n    }\n    render(){\n        console.log(this.state.history)\n        const currentBox = this.getCurrentBox();\n        let winner = this.calculateWinner(currentBox);\n        let status = null;\n        let playAgain = null;\n        if(winner){\n            status = \"Winner is : \"+winner;\n            playAgain = <Button click={this.resetGame}>Play Again</Button>\n        }else{\n            if(this.isGameOver(currentBox)){\n                status = \"Game Tied\"\n                playAgain = <Button click={this.resetGame}>Play Again</Button>\n            }else{\n                status = \"Next Player : \"+(this.state.xIsNext? \"X\":\"O\")\n            }\n        }\n        let highlightBox = Array(9).fill(false);\n        if(winner){\n            const winnerSquareArr = this.winningSquare(currentBox);\n            const [a,b,c] = winnerSquareArr;\n            if(winnerSquareArr.length > 0){\n                highlightBox[a] = highlightBox[b] = highlightBox[c] = true;\n            }\n        }\n        let moveButtons = [];\n        for(let i=0;i<this.state.history.length;i++){\n            let j = 0;\n            if(this.state.moveSortToggle){\n                j = this.state.history.length - 1 -i;\n            }else{\n                j=i\n            }\n            moveButtons.push(<Button active={this.state.stepNumber === j} key={j} click={()=>this.jumpTo(j)}>Go to Move {j}</Button>)\n        }\n        return (\n            <div className={classes.Game}>\n                <Board highlightBox={highlightBox} status={status}move={currentBox} onClick={this.boxClickHandler}/>\n                {playAgain}\n                <div className=\"moveHistory\">\n                    {moveButtons}\n                </div>\n                <Button click={()=>this.setState(prevState=>({moveSortToggle:!prevState.moveSortToggle}))} >Sort Move List</Button>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport Game from './Game';\nconst app = <Game/>\nReactDOM.render(app,document.getElementById(\"root\"));"],"sourceRoot":""}